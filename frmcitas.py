#!/usr/bin/env python

# -*- coding: utf-8 -*-
# generated by wxGlade -1.6.3 on Tue Mar 27 14:19:01 2012

import wx
from  pygame import mixer


# begin wxGlade: extracode
import time
import MplayerCtrl as mpc
from threading import Thread
import socket
import os
from rutinas.varias import *


'''
Obtener la Informacion del Archivo de Configuracion
'''
ruta_arch_conf = os.path.dirname(sys.argv[0])
archivo_configuracion = os.path.join(ruta_arch_conf, 'pyganzo.conf')
fc = FileConfig(archivo_configuracion)

EVT_RESULT_ID = wx.NewId()

def EVT_RESULT(win, func):
    """Define el Result Event."""
    win.Connect(-1, -1, EVT_RESULT_ID, func)

class ResultEvent(wx.PyEvent):
    """Simple event to carry arbitrary result data."""
    def __init__(self, data):
        """Init Result Event."""
        wx.PyEvent.__init__(self)
        self.SetEventType(EVT_RESULT_ID)
        self.data = data

class TestThread(Thread):
    """Clase para manejar los Thread Class."""
    #----------------------------------------------------------------------
    def __init__(self, wxObject):
        """Init Contructor de la clase Thread Class."""
        Thread.__init__(self)
        self.wxObject = wxObject        
        # Se prepara el servidor
        self.server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.server.bind(("", 8000))
        self.server.listen(1)
        self.start()    # Inicia el Hilo
        

    def run(self):
        """Metodo Run del  Thread."""
        # Se prepara el servidor
        #server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        #server.bind(("", 8000))
        #server.listen(1)
        # bucle para atender clientes
        
        self.terminar = False
        while not self.terminar:
            print "Esperando clientes..."
            socket_cliente, datos_cliente = self.server.accept()
            print "conectado cliente:" + str(datos_cliente)
            self.seguir = True
            while self.seguir:                
                self.peticion = socket_cliente.recv(1000)

                
                if self.peticion.strip() == 'adios':
                    print('Me Solicitaron Cerrar, Adios')
                    self.terminar = True
                    self.seguir = False
                    self.server.close()
                    break
 
                if self.peticion:
                    print(self.peticion)
                    socket_cliente.send('Fue')   
                    wx.PostEvent(self.wxObject, ResultEvent(self.peticion))
                    self.seguir = False
                    time.sleep(3)

# end wxGlade


class MiFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MiFrame.__init__
        kwds["style"] =  wx.DEFAULT_FRAME_STYLE  #  wx.FRAME_TOOL_WINDOW 
        wx.Frame.__init__(self, *args, **kwds)
        self.Bind(wx.EVT_CLOSE, self.cerrar_form)
        self.SetWindowVariant(wx.WINDOW_VARIANT_LARGE)
        self.label_cabecera = wx.StaticText(self, -1, "HOSPITAL COROMOTO")
        
        self.list_ctrl_llamados = wx.ListCtrl(self, -1, style=wx.LC_REPORT | wx.SUNKEN_BORDER | wx.LC_HRULES)
        self.list_ctrl_llamados.InsertColumn(0, 'ULTIMOS LLAMADOS A CITA', width=1000)

        self.pos = 0

        self.label_2 = wx.StaticText(self, -1, "Turno Actual", style=wx.TE_CENTRE)
        self.text_ctrl_turno = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE | wx.TE_CENTRE | wx.TE_READONLY)
        self.text_ctrl_especialidad = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE | wx.TE_READONLY)
        #self.mpc = mpc.MplayerCtrl(self, -1, u'mplayer', media_file=u'/home/cgarcia/Videos/HCOROMOTO/VTS_01_1.VOB')             
        self.mpc = mpc.MplayerCtrl(self, -1, u'mplayer')
        self.Bind(mpc.EVT_PROCESS_STARTED, self.iniciar_reproduccion)
        
        TestThread(self)
        self.__set_properties()
        self.__do_layout()
        # end wxGlade

        # Set up event handler for any worker thread results
        EVT_RESULT(self, self.updateDisplay)

    def iniciar_reproduccion(self, evt):
        lista = fc.opcion_consultar('LISTA_REPRODUCCION')[0][1]
        self.mpc.Loadlist(lista)

    def cerrar_form(self, event):
        self.cliente()
        self.Destroy()

    def cliente(self):
        server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server.connect(('127.0.0.1', 8000))
        server.send('adios')    

    def updateDisplay(self, msg):
        """
        recibe datos desde el hilo y actualiza el control
        """

        self.mpc.Pause()
        mixer.init()
        mixer.music.load("campana.mp3")
        mixer.music.play() 
        t = msg.data
        if t.strip() == 'adios':
            self.cerrar_form(self)
            
        lcPaciente, lcEspecialidad = t.split('^')
        lcPacienteDecode = lcPaciente.decode('latin-1')
        
        #Llama al paciente con Voz
        comando_de_voz = "espeak -s140 -v 'es-la'+f2 '%s'" % (lcPacienteDecode)
        os.system(comando_de_voz)
        
        ultimo = lcPacienteDecode + '-' + lcEspecialidad
        if len(ultimo) >0:
            self.list_ctrl_llamados.InsertStringItem(self.pos, ultimo)

        self.pos = 0
        self.text_ctrl_turno.Value = lcPacienteDecode.strip()
        self.text_ctrl_especialidad.Value = lcEspecialidad.strip()
        time.sleep(1)
        self.mpc.Pause()
        #mixer.quit()
       
        '''
        if isinstance(t, int):
            self.text_ctrl_turno.Value = lcPaciente
        else:
            self.text_ctrl_turno.Value = lcPaciente
        '''

    def __set_properties(self):
        # begin wxGlade: MiFrame.__set_properties
        self.SetTitle("Hospital Coromoto")
        self.SetBackgroundColour(wx.Colour(165, 42, 42))

        self.label_cabecera.SetBackgroundColour(wx.Colour(165, 42, 42))
        self.label_cabecera.SetForegroundColour(wx.Colour(255, 255, 255))
        self.label_cabecera.SetFont(wx.Font(50, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))

        self.list_ctrl_llamados.SetMinSize((1000, 232))
        self.list_ctrl_llamados.SetFont(wx.Font(30, wx.MODERN, wx.NORMAL, wx.NORMAL, 0, "URW Gothic L"))
        self.list_ctrl_llamados.SetForegroundColour(wx.Colour(165, 42, 42))

        self.label_2.SetBackgroundColour(wx.Colour(165, 42, 42))
        self.label_2.SetForegroundColour(wx.Colour(255, 255, 255))
        self.label_2.SetFont(wx.Font(38, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))

        self.text_ctrl_turno.SetBackgroundColour(wx.Colour(165, 42, 42))
        self.text_ctrl_turno.SetForegroundColour(wx.Colour(255, 255, 255))
        self.text_ctrl_turno.SetFont(wx.Font(40, wx.DEFAULT, wx.SLANT, wx.BOLD, 0, ""))

        self.text_ctrl_especialidad.SetBackgroundColour(wx.Colour(165, 42, 42))
        self.text_ctrl_especialidad.SetForegroundColour(wx.Colour(255, 255, 255))
        self.text_ctrl_especialidad.SetFont(wx.Font(40, wx.DEFAULT, wx.SLANT, wx.BOLD, 0, ""))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MiFrame.__do_layout
        sizer_cabecera = wx.BoxSizer(wx.VERTICAL)
        sizer_pie_pagina = wx.BoxSizer(wx.HORIZONTAL)
        sizer_lista = wx.BoxSizer(wx.HORIZONTAL)
        sizer_cabecera.Add(self.label_cabecera, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_lista.Add(self.list_ctrl_llamados, 0, wx.EXPAND, 0)
        sizer_lista.Add(self.mpc, 1, wx.EXPAND, 0)
        sizer_cabecera.Add(sizer_lista, 4, wx.EXPAND, 0)
        sizer_pie_pagina.Add(self.label_2, 1, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 1)
        sizer_pie_pagina.Add(self.text_ctrl_turno, 1, wx.EXPAND, 0)
        sizer_pie_pagina.Add(self.text_ctrl_especialidad, 1, wx.EXPAND, 0)
        sizer_cabecera.Add(sizer_pie_pagina, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_cabecera)
        sizer_cabecera.Fit(self)
        self.Layout()
        # end wxGlade

# end of class MiFrame


class MyApp(wx.App):
    def OnInit(self):
        wx.InitAllImageHandlers()
        frame_1 = MiFrame(None, -1, "")
        self.SetTopWindow(frame_1)
        frame_1.Show()
        return 1
# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
